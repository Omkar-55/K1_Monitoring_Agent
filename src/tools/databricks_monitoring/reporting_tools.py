"""
Tools for generating reports about Databricks job monitoring.
"""

import time
from datetime import datetime
from typing import Dict, Any, List, Optional, Union

# Import the logging configuration
from src.agent_core.logging_config import get_logger

# Get logger for this module
logger = get_logger(__name__)

def final_report(issue_type: Union[str, Dict[str, Any]], reasoning: List[Dict[str, Any]] = None, fix_successful: bool = False) -> str:
    """
    Generate a final report for the user after monitoring and fix application.
    
    Args:
        issue_type: The type of issue that was identified, can be string or dict with fix details
        reasoning: List of reasoning steps taken
        fix_successful: Whether the fix was successful
    
    Returns:
        A markdown-formatted report string
    """
    logger.info("Generating final report")
    
    # Get timestamp
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Extract issue_type if it's a dictionary
    if isinstance(issue_type, dict):
        # It's actually fix_details
        fix_details = issue_type
        issue_type = fix_details.get("fix_type", "unknown")
    
    # Generate report header
    report = f"# Databricks Monitoring Report\n\n"
    report += f"**Generated at:** {timestamp}\n\n"
    
    # Issue summary section
    report += f"## Issue Summary\n\n"
    report += f"**Issue Type:** {issue_type.replace('_', ' ')}\n\n"
    
    # Resolution status section
    report += f"## Resolution Status\n\n"
    if fix_successful:
        report += f"✅ **Fix applied successfully.**\n\n"
    else:
        report += f"❌ **Fix was unsuccessful.**\n\n"
    
    # Monitoring steps
    report += f"## Monitoring Steps\n\n"
    if reasoning:
        for step in reasoning:
            step_name = step.get("step", "").replace("_", " ").capitalize()
            step_detail = step.get("description", "")
            report += f"1. **{step_name}**: {step_detail}\n"
    
    # Recommendations
    report += f"## Recommendations\n\n"
    if issue_type == "memory_exceeded":
        report += "- Monitor memory usage with Ganglia or Datadog\n"
        report += "- Consider optimizing joins and heavy aggregations\n"
        report += "- Adjust Spark configurations for better memory management\n"
    elif issue_type == "disk_space_exceeded":
        report += "- Set up disk usage alerts\n"
        report += "- Implement data retention policies\n"
        report += "- Consider using better compression techniques\n"
    elif issue_type == "dependency_error":
        report += "- Use init scripts for installing dependencies\n"
        report += "- Set up proper package management\n"
        report += "- Document required libraries in repository\n"
    else:
        report += "- Regular monitoring of job performance metrics\n"
        report += "- Review logs periodically for potential issues\n"
        report += "- Consider implementing automated alerts for failures\n"
    
    # Footer
    report += "\n---\n*This report was automatically generated by the Databricks Monitoring Agent.*\n"
    
    logger.info("Final report generated successfully")
    return report 